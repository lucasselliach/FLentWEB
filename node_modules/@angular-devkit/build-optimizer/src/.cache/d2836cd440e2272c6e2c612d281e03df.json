{"remainingRequest":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\positioning\\dist\\positioning.js","dependencies":[{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\positioning\\dist\\positioning.js","mtime":499162500000},{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["// previous version:\r\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\r\nvar Positioning = /*@__PURE__*/ (function () {\r\n    function Positioning() {\r\n    }\r\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\r\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\r\n    Positioning.prototype.isStaticPositioned = function (element) {\r\n        return (this.getStyle(element, 'position') || 'static') === 'static';\r\n    };\r\n    Positioning.prototype.offsetParent = function (element) {\r\n        var offsetParentEl = element.offsetParent || document.documentElement;\r\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\r\n            offsetParentEl = offsetParentEl.offsetParent;\r\n        }\r\n        return offsetParentEl || document.documentElement;\r\n    };\r\n    Positioning.prototype.position = function (element, round) {\r\n        if (round === void 0) {\r\n            round = true;\r\n        }\r\n        var elPosition;\r\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\r\n        if (this.getStyle(element, 'position') === 'fixed') {\r\n            elPosition = element.getBoundingClientRect();\r\n        }\r\n        else {\r\n            var offsetParentEl = this.offsetParent(element);\r\n            elPosition = this.offset(element, false);\r\n            if (offsetParentEl !== document.documentElement) {\r\n                parentOffset = this.offset(offsetParentEl, false);\r\n            }\r\n            parentOffset.top += offsetParentEl.clientTop;\r\n            parentOffset.left += offsetParentEl.clientLeft;\r\n        }\r\n        elPosition.top -= parentOffset.top;\r\n        elPosition.bottom -= parentOffset.top;\r\n        elPosition.left -= parentOffset.left;\r\n        elPosition.right -= parentOffset.left;\r\n        if (round) {\r\n            elPosition.top = Math.round(elPosition.top);\r\n            elPosition.bottom = Math.round(elPosition.bottom);\r\n            elPosition.left = Math.round(elPosition.left);\r\n            elPosition.right = Math.round(elPosition.right);\r\n        }\r\n        return elPosition;\r\n    };\r\n    Positioning.prototype.offset = function (element, round) {\r\n        if (round === void 0) {\r\n            round = true;\r\n        }\r\n        var elBcr = element.getBoundingClientRect();\r\n        var viewportOffset = {\r\n            top: window.pageYOffset - document.documentElement.clientTop,\r\n            left: window.pageXOffset - document.documentElement.clientLeft\r\n        };\r\n        var elOffset = {\r\n            height: elBcr.height || element.offsetHeight,\r\n            width: elBcr.width || element.offsetWidth,\r\n            top: elBcr.top + viewportOffset.top,\r\n            bottom: elBcr.bottom + viewportOffset.top,\r\n            left: elBcr.left + viewportOffset.left,\r\n            right: elBcr.right + viewportOffset.left\r\n        };\r\n        if (round) {\r\n            elOffset.height = Math.round(elOffset.height);\r\n            elOffset.width = Math.round(elOffset.width);\r\n            elOffset.top = Math.round(elOffset.top);\r\n            elOffset.bottom = Math.round(elOffset.bottom);\r\n            elOffset.left = Math.round(elOffset.left);\r\n            elOffset.right = Math.round(elOffset.right);\r\n        }\r\n        return elOffset;\r\n    };\r\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\r\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\r\n        var targetElStyles = this.getAllStyles(targetElement);\r\n        var targetElBCR = targetElement.getBoundingClientRect();\r\n        var placementPrimary = placement.split('-')[0] || 'top';\r\n        var placementSecondary = placement.split('-')[1] || 'center';\r\n        var targetElPosition = {\r\n            'height': targetElBCR.height || targetElement.offsetHeight,\r\n            'width': targetElBCR.width || targetElement.offsetWidth,\r\n            'top': 0,\r\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\r\n            'left': 0,\r\n            'right': targetElBCR.width || targetElement.offsetWidth\r\n        };\r\n        switch (placementPrimary) {\r\n            case 'top':\r\n                targetElPosition.top =\r\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left =\r\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\r\n                break;\r\n        }\r\n        switch (placementSecondary) {\r\n            case 'top':\r\n                targetElPosition.top = hostElPosition.top;\r\n                break;\r\n            case 'bottom':\r\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\r\n                break;\r\n            case 'left':\r\n                targetElPosition.left = hostElPosition.left;\r\n                break;\r\n            case 'right':\r\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\r\n                break;\r\n            case 'center':\r\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\r\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\r\n                }\r\n                else {\r\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\r\n                }\r\n                break;\r\n        }\r\n        targetElPosition.top = Math.round(targetElPosition.top);\r\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\r\n        targetElPosition.left = Math.round(targetElPosition.left);\r\n        targetElPosition.right = Math.round(targetElPosition.right);\r\n        return targetElPosition;\r\n    };\r\n    // get the availble placements of the target element in the viewport dependeing on the host element\r\n    Positioning.prototype.getAvailablePlacements = function (hostElement, targetElement) {\r\n        var availablePlacements = [];\r\n        var hostElemClientRect = hostElement.getBoundingClientRect();\r\n        var targetElemClientRect = targetElement.getBoundingClientRect();\r\n        var html = document.documentElement;\r\n        var windowHeight = window.innerHeight || html.clientHeight;\r\n        var windowWidth = window.innerWidth || html.clientWidth;\r\n        var hostElemClientRectHorCenter = hostElemClientRect.left + hostElemClientRect.width / 2;\r\n        var hostElemClientRectVerCenter = hostElemClientRect.top + hostElemClientRect.height / 2;\r\n        // left: check if target width can be placed between host left and viewport start and also height of target is\r\n        // inside viewport\r\n        if (targetElemClientRect.width < hostElemClientRect.left) {\r\n            // check for left only\r\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\r\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'left');\r\n            }\r\n            // check for left-top and left-bottom\r\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);\r\n        }\r\n        // top: target height is less than host top\r\n        if (targetElemClientRect.height < hostElemClientRect.top) {\r\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\r\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'top');\r\n            }\r\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);\r\n        }\r\n        // right: check if target width can be placed between host right and viewport end and also height of target is\r\n        // inside viewport\r\n        if (windowWidth - hostElemClientRect.right > targetElemClientRect.width) {\r\n            // check for right only\r\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\r\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'right');\r\n            }\r\n            // check for right-top and right-bottom\r\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);\r\n        }\r\n        // bottom: check if there is enough space between host bottom and viewport end for target height\r\n        if (windowHeight - hostElemClientRect.bottom > targetElemClientRect.height) {\r\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\r\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\r\n                availablePlacements.splice(availablePlacements.length, 1, 'bottom');\r\n            }\r\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);\r\n        }\r\n        return availablePlacements;\r\n    };\r\n    /**\r\n     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\r\n     * primaryplacement: left|right\r\n     * availablePlacementArr: array in which available placemets to be set\r\n     */\r\n    Positioning.prototype.setSecondaryPlacementForLeftRight = function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\r\n        var html = document.documentElement;\r\n        // check for left-bottom\r\n        if (targetElemClientRect.height <= hostElemClientRect.bottom) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');\r\n        }\r\n        if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');\r\n        }\r\n    };\r\n    /**\r\n     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\r\n     * primaryplacement: top|bottom\r\n     * availablePlacementArr: array in which available placemets to be set\r\n     */\r\n    Positioning.prototype.setSecondaryPlacementForTopBottom = function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\r\n        var html = document.documentElement;\r\n        // check for left-bottom\r\n        if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');\r\n        }\r\n        if (targetElemClientRect.width <= hostElemClientRect.right) {\r\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');\r\n        }\r\n    };\r\n    return Positioning;\r\n}());\r\nexport { Positioning };\r\nvar positionService = new Positioning();\r\n/*\r\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\r\n * Returns the applied placement.\r\n * In case of auto placement, placements are selected in order\r\n *   'top', 'bottom', 'left', 'right',\r\n *   'top-left', 'top-right',\r\n *   'bottom-left', 'bottom-right',\r\n *   'left-top', 'left-bottom',\r\n *   'right-top', 'right-bottom'.\r\n * */\r\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\r\n    var placementVals = Array.isArray(placement) ? placement : [placement];\r\n    // replace auto placement with other placements\r\n    var hasAuto = placementVals.findIndex(function (val) { return val === 'auto'; });\r\n    if (hasAuto >= 0) {\r\n        ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top',\r\n            'left-bottom', 'right-top', 'right-bottom',\r\n        ].forEach(function (obj) {\r\n            if (placementVals.find(function (val) { return val.search('^' + obj) !== -1; }) == null) {\r\n                placementVals.splice(hasAuto++, 1, obj);\r\n            }\r\n        });\r\n    }\r\n    // coordinates where to position\r\n    var topVal = 0, leftVal = 0;\r\n    var appliedPlacement;\r\n    // get available placements\r\n    var availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);\r\n    var _loop_1 = function (item, index) {\r\n        // check if passed placement is present in the available placement or otherwise apply the last placement in the\r\n        // passed placement list\r\n        if ((availablePlacements.find(function (val) { return val === item; }) != null) || (placementVals.length === index + 1)) {\r\n            appliedPlacement = item;\r\n            var pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);\r\n            topVal = pos.top;\r\n            leftVal = pos.left;\r\n            return \"break\";\r\n        }\r\n    };\r\n    // iterate over all the passed placements\r\n    for (var _i = 0, _a = toItemIndexes(placementVals); _i < _a.length; _i++) {\r\n        var _b = _a[_i], item = _b.item, index = _b.index;\r\n        var state_1 = _loop_1(item, index);\r\n        if (state_1 === \"break\")\r\n            break;\r\n    }\r\n    targetElement.style.top = topVal + \"px\";\r\n    targetElement.style.left = leftVal + \"px\";\r\n    return appliedPlacement;\r\n}\r\n// function to get index and item of an array\r\nfunction toItemIndexes(a) {\r\n    return a.map(function (item, index) { return ({ item: item, index: index }); });\r\n}\r\n//# sourceMappingURL=positioning.js.map\r\n",null]}