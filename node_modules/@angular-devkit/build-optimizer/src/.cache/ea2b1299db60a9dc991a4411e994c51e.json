{"remainingRequest":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\calendar-utils\\calendar-utils.js","dependencies":[{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\calendar-utils\\calendar-utils.js","mtime":499162500000},{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Dev\\SgwProjectxs\\SGWProjectxHotelFrontx\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s)\r\n                if (Object.prototype.hasOwnProperty.call(s, p))\r\n                    t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nexport var DAYS_OF_WEEK = /*@__PURE__*/ (function (DAYS_OF_WEEK) {\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"SUNDAY\"] = 0] = \"SUNDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"MONDAY\"] = 1] = \"MONDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"TUESDAY\"] = 2] = \"TUESDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"WEDNESDAY\"] = 3] = \"WEDNESDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"THURSDAY\"] = 4] = \"THURSDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"FRIDAY\"] = 5] = \"FRIDAY\";\r\n    DAYS_OF_WEEK[DAYS_OF_WEEK[\"SATURDAY\"] = 6] = \"SATURDAY\";\r\n    return DAYS_OF_WEEK;\r\n})(DAYS_OF_WEEK || (DAYS_OF_WEEK = {}));\r\nvar DEFAULT_WEEKEND_DAYS = [\r\n    DAYS_OF_WEEK.SUNDAY,\r\n    DAYS_OF_WEEK.SATURDAY\r\n];\r\nvar DAYS_IN_WEEK = 7;\r\nvar HOURS_IN_DAY = 24;\r\nvar MINUTES_IN_HOUR = 60;\r\nexport var SECONDS_IN_DAY = 60 * 60 * 24;\r\nfunction getExcludedSeconds(dateAdapter, _a) {\r\n    var startDate = _a.startDate, seconds = _a.seconds, excluded = _a.excluded, _b = _a.precision, precision = _b === void 0 ? 'days' : _b;\r\n    if (excluded.length < 1) {\r\n        return 0;\r\n    }\r\n    var addSeconds = dateAdapter.addSeconds, getDay = dateAdapter.getDay, addDays = dateAdapter.addDays;\r\n    var endDate = addSeconds(startDate, seconds - 1);\r\n    var dayStart = getDay(startDate);\r\n    var dayEnd = getDay(endDate);\r\n    var result = 0; // Calculated in seconds\r\n    var current = startDate;\r\n    var _loop_1 = function () {\r\n        var day = getDay(current);\r\n        if (excluded.some(function (excludedDay) { return excludedDay === day; })) {\r\n            result += calculateExcludedSeconds(dateAdapter, {\r\n                dayStart: dayStart,\r\n                dayEnd: dayEnd,\r\n                day: day,\r\n                precision: precision,\r\n                startDate: startDate,\r\n                endDate: endDate\r\n            });\r\n        }\r\n        current = addDays(current, 1);\r\n    };\r\n    while (current < endDate) {\r\n        _loop_1();\r\n    }\r\n    return result;\r\n}\r\nfunction calculateExcludedSeconds(dateAdapter, _a) {\r\n    var precision = _a.precision, day = _a.day, dayStart = _a.dayStart, dayEnd = _a.dayEnd, startDate = _a.startDate, endDate = _a.endDate;\r\n    var differenceInSeconds = dateAdapter.differenceInSeconds, endOfDay = dateAdapter.endOfDay, startOfDay = dateAdapter.startOfDay;\r\n    if (precision === 'minutes') {\r\n        if (day === dayStart) {\r\n            return differenceInSeconds(endOfDay(startDate), startDate) + 1;\r\n        }\r\n        else if (day === dayEnd) {\r\n            return differenceInSeconds(endDate, startOfDay(endDate)) + 1;\r\n        }\r\n    }\r\n    return SECONDS_IN_DAY;\r\n}\r\nfunction getWeekViewEventSpan(dateAdapter, _a) {\r\n    var event = _a.event, offset = _a.offset, startOfWeekDate = _a.startOfWeekDate, excluded = _a.excluded, _b = _a.precision, precision = _b === void 0 ? 'days' : _b, totalDaysInView = _a.totalDaysInView;\r\n    var max = dateAdapter.max, differenceInSeconds = dateAdapter.differenceInSeconds, addDays = dateAdapter.addDays, endOfDay = dateAdapter.endOfDay, differenceInDays = dateAdapter.differenceInDays;\r\n    var span = SECONDS_IN_DAY;\r\n    var begin = max(event.start, startOfWeekDate);\r\n    if (event.end) {\r\n        switch (precision) {\r\n            case 'minutes':\r\n                span = differenceInSeconds(event.end, begin);\r\n                break;\r\n            default:\r\n                span =\r\n                    differenceInDays(addDays(endOfDay(event.end), 1), begin) *\r\n                        SECONDS_IN_DAY;\r\n                break;\r\n        }\r\n    }\r\n    var offsetSeconds = offset * SECONDS_IN_DAY;\r\n    var totalLength = offsetSeconds + span;\r\n    // the best way to detect if an event is outside the week-view\r\n    // is to check if the total span beginning (from startOfWeekDay or event start) exceeds the total days in the view\r\n    var secondsInView = totalDaysInView * SECONDS_IN_DAY;\r\n    if (totalLength > secondsInView) {\r\n        span = secondsInView - offsetSeconds;\r\n    }\r\n    span -= getExcludedSeconds(dateAdapter, {\r\n        startDate: begin,\r\n        seconds: span,\r\n        excluded: excluded,\r\n        precision: precision\r\n    });\r\n    return span / SECONDS_IN_DAY;\r\n}\r\nexport function getWeekViewEventOffset(dateAdapter, _a) {\r\n    var event = _a.event, startOfWeekDate = _a.startOfWeek, _b = _a.excluded, excluded = _b === void 0 ? [] : _b, _c = _a.precision, precision = _c === void 0 ? 'days' : _c;\r\n    var differenceInDays = dateAdapter.differenceInDays, startOfDay = dateAdapter.startOfDay, differenceInSeconds = dateAdapter.differenceInSeconds;\r\n    if (event.start < startOfWeekDate) {\r\n        return 0;\r\n    }\r\n    var offset = 0;\r\n    switch (precision) {\r\n        case 'days':\r\n            offset =\r\n                differenceInDays(startOfDay(event.start), startOfWeekDate) *\r\n                    SECONDS_IN_DAY;\r\n            break;\r\n        case 'minutes':\r\n            offset = differenceInSeconds(event.start, startOfWeekDate);\r\n            break;\r\n    }\r\n    offset -= getExcludedSeconds(dateAdapter, {\r\n        startDate: startOfWeekDate,\r\n        seconds: offset,\r\n        excluded: excluded,\r\n        precision: precision\r\n    });\r\n    return Math.abs(offset / SECONDS_IN_DAY);\r\n}\r\nfunction isEventIsPeriod(dateAdapter, _a) {\r\n    var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;\r\n    var isSameSecond = dateAdapter.isSameSecond;\r\n    var eventStart = event.start;\r\n    var eventEnd = event.end || event.start;\r\n    if (eventStart > periodStart && eventStart < periodEnd) {\r\n        return true;\r\n    }\r\n    if (eventEnd > periodStart && eventEnd < periodEnd) {\r\n        return true;\r\n    }\r\n    if (eventStart < periodStart && eventEnd > periodEnd) {\r\n        return true;\r\n    }\r\n    if (isSameSecond(eventStart, periodStart) ||\r\n        isSameSecond(eventStart, periodEnd)) {\r\n        return true;\r\n    }\r\n    if (isSameSecond(eventEnd, periodStart) ||\r\n        isSameSecond(eventEnd, periodEnd)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getEventsInPeriod(dateAdapter, _a) {\r\n    var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;\r\n    return events.filter(function (event) {\r\n        return isEventIsPeriod(dateAdapter, { event: event, periodStart: periodStart, periodEnd: periodEnd });\r\n    });\r\n}\r\nfunction getWeekDay(dateAdapter, _a) {\r\n    var date = _a.date, _b = _a.weekendDays, weekendDays = _b === void 0 ? DEFAULT_WEEKEND_DAYS : _b;\r\n    var startOfDay = dateAdapter.startOfDay, isSameDay = dateAdapter.isSameDay, getDay = dateAdapter.getDay;\r\n    var today = startOfDay(new Date());\r\n    return {\r\n        date: date,\r\n        isPast: date < today,\r\n        isToday: isSameDay(date, today),\r\n        isFuture: date > today,\r\n        isWeekend: weekendDays.indexOf(getDay(date)) > -1\r\n    };\r\n}\r\nexport function getWeekViewHeader(dateAdapter, _a) {\r\n    var viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _b = _a.excluded, excluded = _b === void 0 ? [] : _b, weekendDays = _a.weekendDays, _c = _a.viewStart, viewStart = _c === void 0 ? dateAdapter.startOfWeek(viewDate, { weekStartsOn: weekStartsOn }) : _c, _d = _a.viewEnd, viewEnd = _d === void 0 ? dateAdapter.addDays(viewStart, DAYS_IN_WEEK) : _d;\r\n    var addDays = dateAdapter.addDays, getDay = dateAdapter.getDay;\r\n    var days = [];\r\n    var date = viewStart;\r\n    while (date < viewEnd) {\r\n        if (!excluded.some(function (e) { return getDay(date) === e; })) {\r\n            days.push(getWeekDay(dateAdapter, { date: date, weekendDays: weekendDays }));\r\n        }\r\n        date = addDays(date, 1);\r\n    }\r\n    return days;\r\n}\r\nexport function getDifferenceInDaysWithExclusions(dateAdapter, _a) {\r\n    var date1 = _a.date1, date2 = _a.date2, excluded = _a.excluded;\r\n    var date = date1;\r\n    var diff = 0;\r\n    while (date < date2) {\r\n        if (excluded.indexOf(dateAdapter.getDay(date)) === -1) {\r\n            diff++;\r\n        }\r\n        date = dateAdapter.addDays(date, 1);\r\n    }\r\n    return diff;\r\n}\r\nfunction getAllDayWeekEvents(dateAdapter, _a) {\r\n    var events = _a.events, excluded = _a.excluded, precision = _a.precision, absolutePositionedEvents = _a.absolutePositionedEvents, viewStart = _a.viewStart, viewEnd = _a.viewEnd, eventsInPeriod = _a.eventsInPeriod;\r\n    var differenceInSeconds = dateAdapter.differenceInSeconds, differenceInDays = dateAdapter.differenceInDays;\r\n    var maxRange = getDifferenceInDaysWithExclusions(dateAdapter, {\r\n        date1: viewStart,\r\n        date2: viewEnd,\r\n        excluded: excluded\r\n    });\r\n    var totalDaysInView = differenceInDays(viewEnd, viewStart) + 1;\r\n    var eventsMapped = eventsInPeriod\r\n        .filter(function (event) { return event.allDay; })\r\n        .map(function (event) {\r\n        var offset = getWeekViewEventOffset(dateAdapter, {\r\n            event: event,\r\n            startOfWeek: viewStart,\r\n            excluded: excluded,\r\n            precision: precision\r\n        });\r\n        var span = getWeekViewEventSpan(dateAdapter, {\r\n            event: event,\r\n            offset: offset,\r\n            startOfWeekDate: viewStart,\r\n            excluded: excluded,\r\n            precision: precision,\r\n            totalDaysInView: totalDaysInView\r\n        });\r\n        return { event: event, offset: offset, span: span };\r\n    })\r\n        .filter(function (e) { return e.offset < maxRange; })\r\n        .filter(function (e) { return e.span > 0; })\r\n        .map(function (entry) {\r\n        return ({\r\n            event: entry.event,\r\n            offset: entry.offset,\r\n            span: entry.span,\r\n            startsBeforeWeek: entry.event.start < viewStart,\r\n            endsAfterWeek: (entry.event.end || entry.event.start) > viewEnd\r\n        });\r\n    })\r\n        .sort(function (itemA, itemB) {\r\n        var startSecondsDiff = differenceInSeconds(itemA.event.start, itemB.event.start);\r\n        if (startSecondsDiff === 0) {\r\n            return differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);\r\n        }\r\n        return startSecondsDiff;\r\n    });\r\n    var allDayEventRows = [];\r\n    var allocatedEvents = [];\r\n    eventsMapped.forEach(function (event, index) {\r\n        if (allocatedEvents.indexOf(event) === -1) {\r\n            allocatedEvents.push(event);\r\n            var rowSpan_1 = event.span + event.offset;\r\n            var otherRowEvents = eventsMapped\r\n                .slice(index + 1)\r\n                .filter(function (nextEvent) {\r\n                if (nextEvent.offset >= rowSpan_1 &&\r\n                    rowSpan_1 + nextEvent.span <= totalDaysInView &&\r\n                    allocatedEvents.indexOf(nextEvent) === -1) {\r\n                    var nextEventOffset = nextEvent.offset - rowSpan_1;\r\n                    if (!absolutePositionedEvents) {\r\n                        nextEvent.offset = nextEventOffset;\r\n                    }\r\n                    rowSpan_1 += nextEvent.span + nextEventOffset;\r\n                    allocatedEvents.push(nextEvent);\r\n                    return true;\r\n                }\r\n            });\r\n            allDayEventRows.push({\r\n                row: [event].concat(otherRowEvents)\r\n            });\r\n        }\r\n    });\r\n    return allDayEventRows;\r\n}\r\nfunction getWeekViewHourGrid(dateAdapter, _a) {\r\n    var events = _a.events, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, weekStartsOn = _a.weekStartsOn, excluded = _a.excluded, weekendDays = _a.weekendDays, segmentHeight = _a.segmentHeight, viewStart = _a.viewStart, viewEnd = _a.viewEnd;\r\n    var dayViewHourGrid = getDayViewHourGrid(dateAdapter, {\r\n        viewDate: viewDate,\r\n        hourSegments: hourSegments,\r\n        dayStart: dayStart,\r\n        dayEnd: dayEnd\r\n    });\r\n    var weekDays = getWeekViewHeader(dateAdapter, {\r\n        viewDate: viewDate,\r\n        weekStartsOn: weekStartsOn,\r\n        excluded: excluded,\r\n        weekendDays: weekendDays,\r\n        viewStart: viewStart,\r\n        viewEnd: viewEnd\r\n    });\r\n    var setHours = dateAdapter.setHours, setMinutes = dateAdapter.setMinutes, getHours = dateAdapter.getHours, getMinutes = dateAdapter.getMinutes;\r\n    return weekDays.map(function (day) {\r\n        var dayView = getDayView(dateAdapter, {\r\n            events: events,\r\n            viewDate: day.date,\r\n            hourSegments: hourSegments,\r\n            dayStart: dayStart,\r\n            dayEnd: dayEnd,\r\n            segmentHeight: segmentHeight,\r\n            eventWidth: 1\r\n        });\r\n        var hours = dayViewHourGrid.map(function (hour) {\r\n            var segments = hour.segments.map(function (segment) {\r\n                var date = setMinutes(setHours(day.date, getHours(segment.date)), getMinutes(segment.date));\r\n                return __assign({}, segment, { date: date });\r\n            });\r\n            return __assign({}, hour, { segments: segments });\r\n        });\r\n        function getColumnCount(allEvents, prevOverlappingEvents) {\r\n            var columnCount = Math.max.apply(Math, prevOverlappingEvents.map(function (iEvent) { return iEvent.left + 1; }));\r\n            var nextOverlappingEvents = allEvents\r\n                .filter(function (iEvent) { return iEvent.left >= columnCount; })\r\n                .filter(function (iEvent) {\r\n                return (getOverLappingDayViewEvents(prevOverlappingEvents, iEvent.top, iEvent.top + iEvent.height).length > 0);\r\n            });\r\n            if (nextOverlappingEvents.length > 0) {\r\n                return getColumnCount(allEvents, nextOverlappingEvents);\r\n            }\r\n            else {\r\n                return columnCount;\r\n            }\r\n        }\r\n        return {\r\n            hours: hours,\r\n            date: day.date,\r\n            events: dayView.events.map(function (event) {\r\n                var columnCount = getColumnCount(dayView.events, getOverLappingDayViewEvents(dayView.events, event.top, event.top + event.height));\r\n                var width = 100 / columnCount;\r\n                return __assign({}, event, { left: event.left * width, width: width });\r\n            })\r\n        };\r\n    });\r\n}\r\nexport function getWeekView(dateAdapter, _a) {\r\n    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, _d = _a.precision, precision = _d === void 0 ? 'days' : _d, _e = _a.absolutePositionedEvents, absolutePositionedEvents = _e === void 0 ? false : _e, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, weekendDays = _a.weekendDays, segmentHeight = _a.segmentHeight, _f = _a.viewStart, viewStart = _f === void 0 ? dateAdapter.startOfWeek(viewDate, { weekStartsOn: weekStartsOn }) : _f, _g = _a.viewEnd, viewEnd = _g === void 0 ? dateAdapter.endOfWeek(viewDate, { weekStartsOn: weekStartsOn }) : _g;\r\n    if (!events) {\r\n        events = [];\r\n    }\r\n    var startOfDay = dateAdapter.startOfDay, endOfDay = dateAdapter.endOfDay;\r\n    viewStart = startOfDay(viewStart);\r\n    viewEnd = endOfDay(viewEnd);\r\n    var eventsInPeriod = getEventsInPeriod(dateAdapter, {\r\n        events: events,\r\n        periodStart: viewStart,\r\n        periodEnd: viewEnd\r\n    });\r\n    var header = getWeekViewHeader(dateAdapter, {\r\n        viewDate: viewDate,\r\n        weekStartsOn: weekStartsOn,\r\n        excluded: excluded,\r\n        weekendDays: weekendDays,\r\n        viewStart: viewStart,\r\n        viewEnd: viewEnd\r\n    });\r\n    return {\r\n        allDayEventRows: getAllDayWeekEvents(dateAdapter, {\r\n            events: events,\r\n            excluded: excluded,\r\n            precision: precision,\r\n            absolutePositionedEvents: absolutePositionedEvents,\r\n            viewStart: viewStart,\r\n            viewEnd: viewEnd,\r\n            eventsInPeriod: eventsInPeriod\r\n        }),\r\n        period: {\r\n            events: eventsInPeriod,\r\n            start: header[0].date,\r\n            end: endOfDay(header[header.length - 1].date)\r\n        },\r\n        hourColumns: getWeekViewHourGrid(dateAdapter, {\r\n            events: events,\r\n            viewDate: viewDate,\r\n            hourSegments: hourSegments,\r\n            dayStart: dayStart,\r\n            dayEnd: dayEnd,\r\n            weekStartsOn: weekStartsOn,\r\n            excluded: excluded,\r\n            weekendDays: weekendDays,\r\n            segmentHeight: segmentHeight,\r\n            viewStart: viewStart,\r\n            viewEnd: viewEnd\r\n        })\r\n    };\r\n}\r\nexport function getMonthView(dateAdapter, _a) {\r\n    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, _d = _a.viewStart, viewStart = _d === void 0 ? dateAdapter.startOfMonth(viewDate) : _d, _e = _a.viewEnd, viewEnd = _e === void 0 ? dateAdapter.endOfMonth(viewDate) : _e, weekendDays = _a.weekendDays;\r\n    if (!events) {\r\n        events = [];\r\n    }\r\n    var startOfWeek = dateAdapter.startOfWeek, endOfWeek = dateAdapter.endOfWeek, differenceInDays = dateAdapter.differenceInDays, startOfDay = dateAdapter.startOfDay, addHours = dateAdapter.addHours, endOfDay = dateAdapter.endOfDay, isSameMonth = dateAdapter.isSameMonth, getDay = dateAdapter.getDay, getMonth = dateAdapter.getMonth;\r\n    var start = startOfWeek(viewStart, { weekStartsOn: weekStartsOn });\r\n    var end = endOfWeek(viewEnd, { weekStartsOn: weekStartsOn });\r\n    var eventsInMonth = getEventsInPeriod(dateAdapter, {\r\n        events: events,\r\n        periodStart: start,\r\n        periodEnd: end\r\n    });\r\n    var initialViewDays = [];\r\n    var previousDate;\r\n    var _loop_2 = function (i) {\r\n        // hacky fix for https://github.com/mattlewis92/angular-calendar/issues/173\r\n        var date;\r\n        if (previousDate) {\r\n            date = startOfDay(addHours(previousDate, HOURS_IN_DAY));\r\n            if (previousDate.getTime() === date.getTime()) {\r\n                // DST change, so need to add 25 hours\r\n                /* istanbul ignore next */\r\n                date = startOfDay(addHours(previousDate, HOURS_IN_DAY + 1));\r\n            }\r\n            previousDate = date;\r\n        }\r\n        else {\r\n            date = previousDate = start;\r\n        }\r\n        if (!excluded.some(function (e) { return getDay(date) === e; })) {\r\n            var day = getWeekDay(dateAdapter, {\r\n                date: date,\r\n                weekendDays: weekendDays\r\n            });\r\n            var eventsInPeriod = getEventsInPeriod(dateAdapter, {\r\n                events: eventsInMonth,\r\n                periodStart: startOfDay(date),\r\n                periodEnd: endOfDay(date)\r\n            });\r\n            day.inMonth = isSameMonth(date, viewDate);\r\n            day.events = eventsInPeriod;\r\n            day.badgeTotal = eventsInPeriod.length;\r\n            initialViewDays.push(day);\r\n        }\r\n    };\r\n    for (var i = 0; i < differenceInDays(end, start) + 1; i++) {\r\n        _loop_2(i);\r\n    }\r\n    var days = [];\r\n    var totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;\r\n    if (totalDaysVisibleInWeek < DAYS_IN_WEEK) {\r\n        for (var i = 0; i < initialViewDays.length; i += totalDaysVisibleInWeek) {\r\n            var row = initialViewDays.slice(i, i + totalDaysVisibleInWeek);\r\n            var isRowInMonth = row.some(function (day) { return getMonth(day.date) === getMonth(viewDate); });\r\n            if (isRowInMonth) {\r\n                days = days.concat(row);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        days = initialViewDays;\r\n    }\r\n    var rows = Math.floor(days.length / totalDaysVisibleInWeek);\r\n    var rowOffsets = [];\r\n    for (var i = 0; i < rows; i++) {\r\n        rowOffsets.push(i * totalDaysVisibleInWeek);\r\n    }\r\n    return {\r\n        rowOffsets: rowOffsets,\r\n        totalDaysVisibleInWeek: totalDaysVisibleInWeek,\r\n        days: days,\r\n        period: {\r\n            start: days[0].date,\r\n            end: endOfDay(days[days.length - 1].date),\r\n            events: eventsInMonth\r\n        }\r\n    };\r\n}\r\nfunction getOverLappingDayViewEvents(events, top, bottom) {\r\n    return events.filter(function (previousEvent) {\r\n        var previousEventTop = previousEvent.top;\r\n        var previousEventBottom = previousEvent.top + previousEvent.height;\r\n        if (top < previousEventBottom && previousEventBottom < bottom) {\r\n            return true;\r\n        }\r\n        else if (top < previousEventTop && previousEventTop < bottom) {\r\n            return true;\r\n        }\r\n        else if (previousEventTop <= top && bottom <= previousEventBottom) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nexport function getDayView(dateAdapter, _a) {\r\n    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, eventWidth = _a.eventWidth, segmentHeight = _a.segmentHeight;\r\n    if (!events) {\r\n        events = [];\r\n    }\r\n    var setMinutes = dateAdapter.setMinutes, setHours = dateAdapter.setHours, startOfDay = dateAdapter.startOfDay, startOfMinute = dateAdapter.startOfMinute, endOfDay = dateAdapter.endOfDay, differenceInMinutes = dateAdapter.differenceInMinutes;\r\n    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);\r\n    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);\r\n    var previousDayEvents = [];\r\n    var eventsInPeriod = getEventsInPeriod(dateAdapter, {\r\n        events: events.filter(function (event) { return !event.allDay; }),\r\n        periodStart: startOfView,\r\n        periodEnd: endOfView\r\n    });\r\n    var dayViewEvents = eventsInPeriod\r\n        .sort(function (eventA, eventB) {\r\n        return eventA.start.valueOf() - eventB.start.valueOf();\r\n    })\r\n        .map(function (event) {\r\n        var eventStart = event.start;\r\n        var eventEnd = event.end || eventStart;\r\n        var startsBeforeDay = eventStart < startOfView;\r\n        var endsAfterDay = eventEnd > endOfView;\r\n        var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;\r\n        var top = 0;\r\n        if (eventStart > startOfView) {\r\n            top += differenceInMinutes(eventStart, startOfView);\r\n        }\r\n        top *= hourHeightModifier;\r\n        var startDate = startsBeforeDay ? startOfView : eventStart;\r\n        var endDate = endsAfterDay ? endOfView : eventEnd;\r\n        var height = differenceInMinutes(endDate, startDate);\r\n        if (!event.end) {\r\n            height = segmentHeight;\r\n        }\r\n        else {\r\n            height *= hourHeightModifier;\r\n        }\r\n        var bottom = top + height;\r\n        var overlappingPreviousEvents = getOverLappingDayViewEvents(previousDayEvents, top, bottom);\r\n        var left = 0;\r\n        while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {\r\n            left += eventWidth;\r\n        }\r\n        var dayEvent = {\r\n            event: event,\r\n            height: height,\r\n            width: eventWidth,\r\n            top: top,\r\n            left: left,\r\n            startsBeforeDay: startsBeforeDay,\r\n            endsAfterDay: endsAfterDay\r\n        };\r\n        previousDayEvents.push(dayEvent);\r\n        return dayEvent;\r\n    });\r\n    var width = Math.max.apply(Math, dayViewEvents.map(function (event) { return event.left + event.width; }));\r\n    var allDayEvents = getEventsInPeriod(dateAdapter, {\r\n        events: events.filter(function (event) { return event.allDay; }),\r\n        periodStart: startOfDay(startOfView),\r\n        periodEnd: endOfDay(endOfView)\r\n    });\r\n    return {\r\n        events: dayViewEvents,\r\n        width: width,\r\n        allDayEvents: allDayEvents,\r\n        period: {\r\n            events: eventsInPeriod,\r\n            start: startOfView,\r\n            end: endOfView\r\n        }\r\n    };\r\n}\r\nexport function getDayViewHourGrid(dateAdapter, _a) {\r\n    var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;\r\n    var setMinutes = dateAdapter.setMinutes, setHours = dateAdapter.setHours, startOfDay = dateAdapter.startOfDay, startOfMinute = dateAdapter.startOfMinute, endOfDay = dateAdapter.endOfDay, addMinutes = dateAdapter.addMinutes, addHours = dateAdapter.addHours;\r\n    var hours = [];\r\n    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);\r\n    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);\r\n    var segmentDuration = MINUTES_IN_HOUR / hourSegments;\r\n    var startOfViewDay = startOfDay(viewDate);\r\n    for (var i = 0; i < HOURS_IN_DAY; i++) {\r\n        var segments = [];\r\n        for (var j = 0; j < hourSegments; j++) {\r\n            var date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);\r\n            if (date >= startOfView && date < endOfView) {\r\n                segments.push({\r\n                    date: date,\r\n                    isStart: j === 0\r\n                });\r\n            }\r\n        }\r\n        if (segments.length > 0) {\r\n            hours.push({ segments: segments });\r\n        }\r\n    }\r\n    return hours;\r\n}\r\nexport var EventValidationErrorMessage;\r\n(function (EventValidationErrorMessage) {\r\n    EventValidationErrorMessage[\"NotArray\"] = \"Events must be an array\";\r\n    EventValidationErrorMessage[\"StartPropertyMissing\"] = \"Event is missing the `start` property\";\r\n    EventValidationErrorMessage[\"StartPropertyNotDate\"] = \"Event `start` property should be a javascript date object. Do `new Date(event.start)` to fix it.\";\r\n    EventValidationErrorMessage[\"EndPropertyNotDate\"] = \"Event `end` property should be a javascript date object. Do `new Date(event.end)` to fix it.\";\r\n    EventValidationErrorMessage[\"EndsBeforeStart\"] = \"Event `start` property occurs after the `end`\";\r\n})(EventValidationErrorMessage || (EventValidationErrorMessage = {}));\r\nexport function validateEvents(events, log) {\r\n    var isValid = true;\r\n    function isError(msg, event) {\r\n        log(msg, event);\r\n        isValid = false;\r\n    }\r\n    if (!Array.isArray(events)) {\r\n        log(EventValidationErrorMessage.NotArray, events);\r\n        return false;\r\n    }\r\n    events.forEach(function (event) {\r\n        if (!event.start) {\r\n            isError(EventValidationErrorMessage.StartPropertyMissing, event);\r\n        }\r\n        else if (!(event.start instanceof Date)) {\r\n            isError(EventValidationErrorMessage.StartPropertyNotDate, event);\r\n        }\r\n        if (event.end) {\r\n            if (!(event.end instanceof Date)) {\r\n                isError(EventValidationErrorMessage.EndPropertyNotDate, event);\r\n            }\r\n            if (event.start > event.end) {\r\n                isError(EventValidationErrorMessage.EndsBeforeStart, event);\r\n            }\r\n        }\r\n    });\r\n    return isValid;\r\n}\r\n//# sourceMappingURL=calendar-utils.js.map\r\n",null]}