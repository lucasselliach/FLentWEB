(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-draggable-droppable', ['exports', 'rxjs', '@angular/core', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['angular-draggable-droppable'] = {}),global.rxjs,global.ng.core,global.rxjs.operators,global.ng.common));
}(this, (function (exports,rxjs,i0,operators,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DraggableHelper = /** @class */ (function () {
        function DraggableHelper() {
            this.currentDrag = new rxjs.Subject();
        }
        DraggableHelper.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ DraggableHelper.ngInjectableDef = i0.defineInjectable({ factory: function DraggableHelper_Factory() { return new DraggableHelper(); }, token: DraggableHelper, providedIn: "root" });
        return DraggableHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DraggableScrollContainerDirective = /** @class */ (function () {
        function DraggableScrollContainerDirective(elementRef) {
            this.elementRef = elementRef;
        }
        DraggableScrollContainerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[mwlDraggableScrollContainer]'
                    },] }
        ];
        /** @nocollapse */
        DraggableScrollContainerDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        return DraggableScrollContainerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DraggableDirective = /** @class */ (function () {
        /**
         * @hidden
         */
        function DraggableDirective(element, renderer, draggableHelper, zone, vcr, scrollContainer, document) {
            this.element = element;
            this.renderer = renderer;
            this.draggableHelper = draggableHelper;
            this.zone = zone;
            this.vcr = vcr;
            this.scrollContainer = scrollContainer;
            this.document = document;
            /**
             * The axis along which the element is draggable
             */
            this.dragAxis = { x: true, y: true };
            /**
             * Snap all drags to an x / y grid
             */
            this.dragSnapGrid = {};
            /**
             * Show a ghost element that shows the drag when dragging
             */
            this.ghostDragEnabled = true;
            /**
             * Show the original element when ghostDragEnabled is true
             */
            this.showOriginalElementWhileDragging = false;
            /**
             * The cursor to use when dragging the element
             */
            this.dragCursor = '';
            /**
             * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it
             */
            this.dragPointerDown = new i0.EventEmitter();
            /**
             * Called when the element has started to be dragged.
             * Only called after at least one mouse or touch move event.
             * If you call $event.cancelDrag$.emit() it will cancel the current drag
             */
            this.dragStart = new i0.EventEmitter();
            /**
             * Called after the ghost element has been created
             */
            this.ghostElementCreated = new i0.EventEmitter();
            /**
             * Called when the element is being dragged
             */
            this.dragging = new i0.EventEmitter();
            /**
             * Called after the element is dragged
             */
            this.dragEnd = new i0.EventEmitter();
            /**
             * @hidden
             */
            this.pointerDown$ = new rxjs.Subject();
            /**
             * @hidden
             */
            this.pointerMove$ = new rxjs.Subject();
            /**
             * @hidden
             */
            this.pointerUp$ = new rxjs.Subject();
            this.eventListenerSubscriptions = {};
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.checkEventListeners();
                /** @type {?} */
                var pointerDragged$ = this.pointerDown$.pipe(operators.filter(function () { return _this.canDrag(); }), operators.mergeMap(function (pointerDownEvent) {
                    // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61
                    // stop mouse events propagating up the chain
                    if (pointerDownEvent.event.stopPropagation) {
                        pointerDownEvent.event.stopPropagation();
                    }
                    /** @type {?} */
                    var globalDragStyle = _this.renderer.createElement('style');
                    _this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');
                    _this.renderer.appendChild(globalDragStyle, _this.renderer.createText("\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        "));
                    _this.document.head.appendChild(globalDragStyle);
                    /** @type {?} */
                    var startScrollPosition = _this.getScrollPosition();
                    /** @type {?} */
                    var scrollContainerScroll$ = new rxjs.Observable(function (observer) {
                        /** @type {?} */
                        var scrollContainer = _this.scrollContainer
                            ? _this.scrollContainer.elementRef.nativeElement
                            : 'window';
                        return _this.renderer.listen(scrollContainer, 'scroll', function (e) {
                            return observer.next(e);
                        });
                    }).pipe(operators.startWith(startScrollPosition), operators.map(function () { return _this.getScrollPosition(); }));
                    /** @type {?} */
                    var currentDrag$ = new rxjs.Subject();
                    /** @type {?} */
                    var cancelDrag$ = new rxjs.ReplaySubject();
                    _this.zone.run(function () {
                        _this.dragPointerDown.next({ x: 0, y: 0 });
                    });
                    /** @type {?} */
                    var dragComplete$ = rxjs.merge(_this.pointerUp$, _this.pointerDown$, cancelDrag$, _this.destroy$).pipe(operators.share());
                    /** @type {?} */
                    var pointerMove = rxjs.combineLatest(_this.pointerMove$, scrollContainerScroll$).pipe(operators.map(function (_a) {
                        var _b = __read(_a, 2), pointerMoveEvent = _b[0], scroll = _b[1];
                        return {
                            currentDrag$: currentDrag$,
                            transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,
                            transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,
                            clientX: pointerMoveEvent.clientX,
                            clientY: pointerMoveEvent.clientY,
                            scrollLeft: scroll.left,
                            scrollTop: scroll.top
                        };
                    }), operators.map(function (moveData) {
                        if (_this.dragSnapGrid.x) {
                            moveData.transformX =
                                Math.round(moveData.transformX / _this.dragSnapGrid.x) *
                                    _this.dragSnapGrid.x;
                        }
                        if (_this.dragSnapGrid.y) {
                            moveData.transformY =
                                Math.round(moveData.transformY / _this.dragSnapGrid.y) *
                                    _this.dragSnapGrid.y;
                        }
                        return moveData;
                    }), operators.map(function (moveData) {
                        if (!_this.dragAxis.x) {
                            moveData.transformX = 0;
                        }
                        if (!_this.dragAxis.y) {
                            moveData.transformY = 0;
                        }
                        return moveData;
                    }), operators.map(function (moveData) {
                        /** @type {?} */
                        var scrollX = moveData.scrollLeft - startScrollPosition.left;
                        /** @type {?} */
                        var scrollY = moveData.scrollTop - startScrollPosition.top;
                        return __assign({}, moveData, { x: moveData.transformX + scrollX, y: moveData.transformY + scrollY });
                    }), operators.filter(function (_a) {
                        var x = _a.x, y = _a.y;
                        return !_this.validateDrag || _this.validateDrag({ x: x, y: y });
                    }), operators.takeUntil(dragComplete$), operators.share());
                    /** @type {?} */
                    var dragStarted$ = pointerMove.pipe(operators.take(1), operators.share());
                    /** @type {?} */
                    var dragEnded$ = pointerMove.pipe(operators.takeLast(1), operators.share());
                    dragStarted$.subscribe(function () {
                        _this.zone.run(function () {
                            _this.dragStart.next({ cancelDrag$: cancelDrag$ });
                        });
                        _this.renderer.addClass(_this.element.nativeElement, _this.dragActiveClass);
                        if (_this.ghostDragEnabled) {
                            /** @type {?} */
                            var rect = _this.element.nativeElement.getBoundingClientRect();
                            /** @type {?} */
                            var clone_1 = /** @type {?} */ (_this.element.nativeElement.cloneNode(true));
                            if (!_this.showOriginalElementWhileDragging) {
                                _this.renderer.setStyle(_this.element.nativeElement, 'visibility', 'hidden');
                            }
                            if (_this.ghostElementAppendTo) {
                                _this.ghostElementAppendTo.appendChild(clone_1);
                            }
                            else {
                                /** @type {?} */ ((_this.element.nativeElement.parentNode)).insertBefore(clone_1, _this.element.nativeElement.nextSibling);
                            }
                            _this.ghostElement = clone_1;
                            _this.setElementStyles(clone_1, {
                                position: 'fixed',
                                top: rect.top + "px",
                                left: rect.left + "px",
                                width: rect.width + "px",
                                height: rect.height + "px",
                                cursor: _this.dragCursor,
                                margin: '0'
                            });
                            if (_this.ghostElementTemplate) {
                                /** @type {?} */
                                var viewRef_1 = _this.vcr.createEmbeddedView(_this.ghostElementTemplate);
                                clone_1.innerHTML = '';
                                viewRef_1.rootNodes
                                    .filter(function (node) { return node instanceof Node; })
                                    .forEach(function (node) {
                                    clone_1.appendChild(node);
                                });
                                dragEnded$.subscribe(function () {
                                    _this.vcr.remove(_this.vcr.indexOf(viewRef_1));
                                });
                            }
                            _this.zone.run(function () {
                                _this.ghostElementCreated.emit();
                            });
                            dragEnded$.subscribe(function () {
                                /** @type {?} */ ((clone_1.parentElement)).removeChild(clone_1);
                                _this.ghostElement = null;
                                _this.renderer.setStyle(_this.element.nativeElement, 'visibility', '');
                            });
                        }
                        _this.draggableHelper.currentDrag.next(currentDrag$);
                    });
                    dragEnded$
                        .pipe(operators.mergeMap(function (dragEndData) {
                        /** @type {?} */
                        var dragEndData$ = cancelDrag$.pipe(operators.count(), operators.take(1), operators.map(function (calledCount) { return (__assign({}, dragEndData, { dragCancelled: calledCount > 0 })); }));
                        cancelDrag$.complete();
                        return dragEndData$;
                    }))
                        .subscribe(function (_a) {
                        var x = _a.x, y = _a.y, dragCancelled = _a.dragCancelled;
                        _this.zone.run(function () {
                            _this.dragEnd.next({ x: x, y: y, dragCancelled: dragCancelled });
                        });
                        _this.renderer.removeClass(_this.element.nativeElement, _this.dragActiveClass);
                        currentDrag$.complete();
                    });
                    rxjs.merge(dragComplete$, dragEnded$)
                        .pipe(operators.take(1))
                        .subscribe(function () {
                        _this.document.head.removeChild(globalDragStyle);
                    });
                    return pointerMove;
                }), operators.share());
                rxjs.merge(pointerDragged$.pipe(operators.take(1), operators.map(function (value) { return [, value]; })), pointerDragged$.pipe(operators.pairwise()))
                    .pipe(operators.filter(function (_a) {
                    var _b = __read(_a, 2), previous = _b[0], next = _b[1];
                    if (!previous) {
                        return true;
                    }
                    return previous.x !== next.x || previous.y !== next.y;
                }), operators.map(function (_a) {
                    var _b = __read(_a, 2), previous = _b[0], next = _b[1];
                    return next;
                }))
                    .subscribe(function (_a) {
                    var x = _a.x, y = _a.y, currentDrag$ = _a.currentDrag$, clientX = _a.clientX, clientY = _a.clientY, transformX = _a.transformX, transformY = _a.transformY;
                    _this.zone.run(function () {
                        _this.dragging.next({ x: x, y: y });
                    });
                    if (_this.ghostElement) {
                        /** @type {?} */
                        var transform = "translate(" + transformX + "px, " + transformY + "px)";
                        _this.setElementStyles(_this.ghostElement, {
                            transform: transform,
                            '-webkit-transform': transform,
                            '-ms-transform': transform,
                            '-moz-transform': transform,
                            '-o-transform': transform
                        });
                    }
                    currentDrag$.next({
                        clientX: clientX,
                        clientY: clientY,
                        dropData: _this.dropData
                    });
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DraggableDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["dragAxis"]) {
                    this.checkEventListeners();
                }
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribeEventListeners();
                this.pointerDown$.complete();
                this.pointerMove$.complete();
                this.pointerUp$.complete();
                this.destroy$.next();
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.checkEventListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var canDrag = this.canDrag();
                /** @type {?} */
                var hasEventListeners = Object.keys(this.eventListenerSubscriptions).length > 0;
                if (canDrag && !hasEventListeners) {
                    this.zone.runOutsideAngular(function () {
                        _this.eventListenerSubscriptions.mousedown = _this.renderer.listen(_this.element.nativeElement, 'mousedown', function (event) {
                            _this.onMouseDown(event);
                        });
                        _this.eventListenerSubscriptions.mouseup = _this.renderer.listen('document', 'mouseup', function (event) {
                            _this.onMouseUp(event);
                        });
                        _this.eventListenerSubscriptions.touchstart = _this.renderer.listen(_this.element.nativeElement, 'touchstart', function (event) {
                            _this.onTouchStart(event);
                        });
                        _this.eventListenerSubscriptions.touchend = _this.renderer.listen('document', 'touchend', function (event) {
                            _this.onTouchEnd(event);
                        });
                        _this.eventListenerSubscriptions.touchcancel = _this.renderer.listen('document', 'touchcancel', function (event) {
                            _this.onTouchEnd(event);
                        });
                        _this.eventListenerSubscriptions.mouseenter = _this.renderer.listen(_this.element.nativeElement, 'mouseenter', function () {
                            _this.onMouseEnter();
                        });
                        _this.eventListenerSubscriptions.mouseleave = _this.renderer.listen(_this.element.nativeElement, 'mouseleave', function () {
                            _this.onMouseLeave();
                        });
                    });
                }
                else if (!canDrag && hasEventListeners) {
                    this.unsubscribeEventListeners();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.onMouseDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this.eventListenerSubscriptions.mousemove) {
                    this.eventListenerSubscriptions.mousemove = this.renderer.listen('document', 'mousemove', function (mouseMoveEvent) {
                        _this.pointerMove$.next({
                            event: mouseMoveEvent,
                            clientX: mouseMoveEvent.clientX,
                            clientY: mouseMoveEvent.clientY
                        });
                    });
                }
                this.pointerDown$.next({
                    event: event,
                    clientX: event.clientX,
                    clientY: event.clientY
                });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.onMouseUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.eventListenerSubscriptions.mousemove) {
                    this.eventListenerSubscriptions.mousemove();
                    delete this.eventListenerSubscriptions.mousemove;
                }
                this.pointerUp$.next({
                    event: event,
                    clientX: event.clientX,
                    clientY: event.clientY
                });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.onTouchStart = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this.eventListenerSubscriptions.touchmove) {
                    this.eventListenerSubscriptions.touchmove = this.renderer.listen('document', 'touchmove', function (touchMoveEvent) {
                        _this.pointerMove$.next({
                            event: touchMoveEvent,
                            clientX: touchMoveEvent.targetTouches[0].clientX,
                            clientY: touchMoveEvent.targetTouches[0].clientY
                        });
                    });
                }
                this.pointerDown$.next({
                    event: event,
                    clientX: event.touches[0].clientX,
                    clientY: event.touches[0].clientY
                });
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.onTouchEnd = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.eventListenerSubscriptions.touchmove) {
                    this.eventListenerSubscriptions.touchmove();
                    delete this.eventListenerSubscriptions.touchmove;
                }
                this.pointerUp$.next({
                    event: event,
                    clientX: event.changedTouches[0].clientX,
                    clientY: event.changedTouches[0].clientY
                });
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.onMouseEnter = /**
         * @return {?}
         */
            function () {
                this.setCursor(this.dragCursor);
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.onMouseLeave = /**
         * @return {?}
         */
            function () {
                this.setCursor('');
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.canDrag = /**
         * @return {?}
         */
            function () {
                return this.dragAxis.x || this.dragAxis.y;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DraggableDirective.prototype.setCursor = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.renderer.setStyle(this.element.nativeElement, 'cursor', value);
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.unsubscribeEventListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                Object.keys(this.eventListenerSubscriptions).forEach(function (type) {
                    ( /** @type {?} */(_this)).eventListenerSubscriptions[type]();
                    delete ( /** @type {?} */(_this)).eventListenerSubscriptions[type];
                });
            };
        /**
         * @param {?} element
         * @param {?} styles
         * @return {?}
         */
        DraggableDirective.prototype.setElementStyles = /**
         * @param {?} element
         * @param {?} styles
         * @return {?}
         */
            function (element, styles) {
                var _this = this;
                Object.keys(styles).forEach(function (key) {
                    _this.renderer.setStyle(element, key, styles[key]);
                });
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.getScrollPosition = /**
         * @return {?}
         */
            function () {
                if (this.scrollContainer) {
                    return {
                        top: this.scrollContainer.elementRef.nativeElement.scrollTop,
                        left: this.scrollContainer.elementRef.nativeElement.scrollLeft
                    };
                }
                else {
                    return {
                        top: window.pageYOffset || document.documentElement.scrollTop,
                        left: window.pageXOffset || document.documentElement.scrollLeft
                    };
                }
            };
        DraggableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[mwlDraggable]'
                    },] }
        ];
        /** @nocollapse */
        DraggableDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: DraggableHelper },
                { type: i0.NgZone },
                { type: i0.ViewContainerRef },
                { type: DraggableScrollContainerDirective, decorators: [{ type: i0.Optional }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        DraggableDirective.propDecorators = {
            dropData: [{ type: i0.Input }],
            dragAxis: [{ type: i0.Input }],
            dragSnapGrid: [{ type: i0.Input }],
            ghostDragEnabled: [{ type: i0.Input }],
            showOriginalElementWhileDragging: [{ type: i0.Input }],
            validateDrag: [{ type: i0.Input }],
            dragCursor: [{ type: i0.Input }],
            dragActiveClass: [{ type: i0.Input }],
            ghostElementAppendTo: [{ type: i0.Input }],
            ghostElementTemplate: [{ type: i0.Input }],
            dragPointerDown: [{ type: i0.Output }],
            dragStart: [{ type: i0.Output }],
            ghostElementCreated: [{ type: i0.Output }],
            dragging: [{ type: i0.Output }],
            dragEnd: [{ type: i0.Output }]
        };
        return DraggableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} clientX
     * @param {?} clientY
     * @param {?} rect
     * @return {?}
     */
    function isCoordinateWithinRectangle(clientX, clientY, rect) {
        return (clientX >= rect.left &&
            clientX <= rect.right &&
            clientY >= rect.top &&
            clientY <= rect.bottom);
    }
    var DroppableDirective = /** @class */ (function () {
        function DroppableDirective(element, draggableHelper, zone, renderer, scrollContainer) {
            this.element = element;
            this.draggableHelper = draggableHelper;
            this.zone = zone;
            this.renderer = renderer;
            this.scrollContainer = scrollContainer;
            /**
             * Called when a draggable element starts overlapping the element
             */
            this.dragEnter = new i0.EventEmitter();
            /**
             * Called when a draggable element stops overlapping the element
             */
            this.dragLeave = new i0.EventEmitter();
            /**
             * Called when a draggable element is moved over the element
             */
            this.dragOver = new i0.EventEmitter();
            /**
             * Called when a draggable element is dropped on this element
             */
            this.drop = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        DroppableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(function (drag$) {
                    _this.renderer.addClass(_this.element.nativeElement, _this.dragActiveClass);
                    /** @type {?} */
                    var droppableElement = {
                        updateCache: true
                    };
                    /** @type {?} */
                    var deregisterScrollListener = _this.renderer.listen(_this.scrollContainer
                        ? _this.scrollContainer.elementRef.nativeElement
                        : 'window', 'scroll', function () {
                        droppableElement.updateCache = true;
                    });
                    /** @type {?} */
                    var currentDragDropData;
                    /** @type {?} */
                    var overlaps$ = drag$.pipe(operators.map(function (_a) {
                        var clientX = _a.clientX, clientY = _a.clientY, dropData = _a.dropData;
                        currentDragDropData = dropData;
                        if (droppableElement.updateCache) {
                            droppableElement.rect = _this.element.nativeElement.getBoundingClientRect();
                            if (_this.scrollContainer) {
                                droppableElement.scrollContainerRect = _this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();
                            }
                            droppableElement.updateCache = false;
                        }
                        /** @type {?} */
                        var isWithinElement = isCoordinateWithinRectangle(clientX, clientY, /** @type {?} */ (droppableElement.rect));
                        if (droppableElement.scrollContainerRect) {
                            return (isWithinElement &&
                                isCoordinateWithinRectangle(clientX, clientY, /** @type {?} */ (droppableElement.scrollContainerRect)));
                        }
                        else {
                            return isWithinElement;
                        }
                    }));
                    /** @type {?} */
                    var overlapsChanged$ = overlaps$.pipe(operators.distinctUntilChanged());
                    /** @type {?} */
                    var dragOverActive; // TODO - see if there's a way of doing this via rxjs
                    overlapsChanged$
                        .pipe(operators.filter(function (overlapsNow) { return overlapsNow; }))
                        .subscribe(function () {
                        dragOverActive = true;
                        _this.renderer.addClass(_this.element.nativeElement, _this.dragOverClass);
                        _this.zone.run(function () {
                            _this.dragEnter.next({
                                dropData: currentDragDropData
                            });
                        });
                    });
                    overlaps$.pipe(operators.filter(function (overlapsNow) { return overlapsNow; })).subscribe(function () {
                        _this.zone.run(function () {
                            _this.dragOver.next({
                                dropData: currentDragDropData
                            });
                        });
                    });
                    overlapsChanged$
                        .pipe(operators.pairwise(), operators.filter(function (_a) {
                        var _b = __read(_a, 2), didOverlap = _b[0], overlapsNow = _b[1];
                        return didOverlap && !overlapsNow;
                    }))
                        .subscribe(function () {
                        dragOverActive = false;
                        _this.renderer.removeClass(_this.element.nativeElement, _this.dragOverClass);
                        _this.zone.run(function () {
                            _this.dragLeave.next({
                                dropData: currentDragDropData
                            });
                        });
                    });
                    drag$.subscribe({
                        complete: function () {
                            deregisterScrollListener();
                            _this.renderer.removeClass(_this.element.nativeElement, _this.dragActiveClass);
                            if (dragOverActive) {
                                _this.renderer.removeClass(_this.element.nativeElement, _this.dragOverClass);
                                _this.zone.run(function () {
                                    _this.drop.next({
                                        dropData: currentDragDropData
                                    });
                                });
                            }
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        DroppableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.currentDragSubscription) {
                    this.currentDragSubscription.unsubscribe();
                }
            };
        DroppableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[mwlDroppable]'
                    },] }
        ];
        /** @nocollapse */
        DroppableDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: DraggableHelper },
                { type: i0.NgZone },
                { type: i0.Renderer2 },
                { type: DraggableScrollContainerDirective, decorators: [{ type: i0.Optional }] }
            ];
        };
        DroppableDirective.propDecorators = {
            dragOverClass: [{ type: i0.Input }],
            dragActiveClass: [{ type: i0.Input }],
            dragEnter: [{ type: i0.Output }],
            dragLeave: [{ type: i0.Output }],
            dragOver: [{ type: i0.Output }],
            drop: [{ type: i0.Output }]
        };
        return DroppableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DragAndDropModule = /** @class */ (function () {
        function DragAndDropModule() {
        }
        DragAndDropModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            DraggableDirective,
                            DroppableDirective,
                            DraggableScrollContainerDirective
                        ],
                        exports: [
                            DraggableDirective,
                            DroppableDirective,
                            DraggableScrollContainerDirective
                        ]
                    },] }
        ];
        return DragAndDropModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.DragAndDropModule = DragAndDropModule;
    exports.ɵc = DraggableHelper;
    exports.ɵd = DraggableScrollContainerDirective;
    exports.ɵb = DraggableDirective;
    exports.ɵa = DroppableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,